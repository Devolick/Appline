<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Appline</name>
    </assembly>
    <members>
        <member name="T:Appline.ContextLine`1">
            <summary>
            Line for the transfer of complex objects.
            </summary>
            <typeparam name="TContext">Type of the transmitted object</typeparam>
        </member>
        <member name="P:Appline.ContextLine`1.Notify">
            <summary>
            The notification object.
            </summary>
        </member>
        <member name="M:Appline.ContextLine`1.Receive">
            <summary>
            Contains the cycle for receiving a message
            </summary>
        </member>
        <member name="M:Appline.ContextLine`1.Send(`0)">
            <summary>
            Sends the string to the other end of the line.
            </summary>
            <param name="context">Complex object.</param>
        </member>
        <member name="T:Appline.ExCode">
            <summary>
            Error code for LineException exception.
            </summary>
        </member>
        <member name="F:Appline.ExCode.Send">
            <summary>
            Error code for sending data.
            </summary>
        </member>
        <member name="F:Appline.ExCode.Receive">
            <summary>
            Error code for receiving data.
            </summary>
        </member>
        <member name="F:Appline.ExCode.Connect">
            <summary>
            Error code for connection.
            </summary>
        </member>
        <member name="T:Appline.LineException">
            <summary>
            The exception that is throw when there is a line fault.
            </summary>
        </member>
        <member name="P:Appline.LineException.Code">
            <summary>
            Exception code.
            </summary>
        </member>
        <member name="M:Appline.LineException.#ctor(System.String,System.Exception,Appline.ExCode)">
            <summary>
            Initializes a new instance of the LineException class to handle exceptions for working with a line.
            </summary>
            <param name="msg">A string that describes that error.</param>
            <param name="ex">The exception that is cause current exception. If the innerException parameter is not, the current exception is raised in a catch block that handles the inner exception.</param>
            <param name="code">Exception code.</param>
        </member>
        <member name="T:Appline.LineFactory">
            <summary>
            Factory for creating lines
            </summary>
        </member>
        <member name="M:Appline.LineFactory.Launcher(Appline.NotifyMessage,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Generates the main line object and starts the second process.
            </summary>
            <param name="notify">The notification object.</param>
            <param name="filePath">The path of the second process.</param>
            <param name="timeout">Time waiting for the connection response. Example 3000ms</param>
            <param name="dotnet">Run as dotnet.</param>
            <param name="args">Arguments for second process.</param>
            <returns>Returns main line.</returns>
        </member>
        <member name="M:Appline.LineFactory.Launcher(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Generates the main line object and starts the second process.
            </summary>
            <param name="filePath">The path of the second process.</param>
            <param name="timeout">Time waiting for the connection response.</param>
            <param name="dotnet">Run as dotnet.</param>
            <param name="args">Arguments for second process.</param>
            <returns>Returns main line.</returns>
        </member>
        <member name="M:Appline.LineFactory.Launcher``1(Appline.NotifyContext{``0},System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Generates the main line object and starts the second process.
            </summary>
            <typeparam name="TContext">Type of the transmitted context.</typeparam>
            <param name="notify">The notification object.</param>
            <param name="filePath">The path of the second process.</param>
            <param name="timeout">Time waiting for the connection response.</param>
            <param name="dotnet">Run as dotnet.</param>
            <param name="args">Arguments for second process.</param>
            <returns>Returns main line.</returns>
        </member>
        <member name="M:Appline.LineFactory.Application(Appline.NotifyMessage,System.Int32,System.String)">
            <summary>
            Generates the other side object of the line.
            </summary>
            <param name="notify">The notification object.</param>
            <param name="timeout">Time waiting for the connection response.</param>
            <param name="args">Pass entry point args for connect.</param>
            <returns>Returns the other side of the line.</returns>
        </member>
        <member name="M:Appline.LineFactory.Application``1(Appline.NotifyContext{``0},System.Int32,System.String)">
            <summary>
            Generates the other side object of the line.
            </summary>
            <typeparam name="TContext">Type of the transmitted context.</typeparam>
            <param name="notify">The notification object.</param>
            <param name="timeout">Time waiting for the connection response.</param>
            <param name="args">Pass entry point args for connect.</param>
            <returns>Returns the other side of the line.</returns>
        </member>
        <member name="M:Appline.LineFactory.Application(System.Int32,System.String)">
            <summary>
            Generates the other side object of the line.
            </summary>
            <param name="timeout">Time waiting for the connection response.</param>
            <param name="args">Pass entry point args for connect.</param>
            <returns>Returns the other side of the line.</returns>
        </member>
        <member name="M:Appline.LineFactory.Application(System.Int32,System.String[])">
            <summary>
            Generates the other side object of the line.
            </summary>
            <param name="timeout">Time waiting for the connection response.</param>
            <param name="args">Pass entry point args for connect.</param>
            <returns>Returns the other side of the line.</returns>
        </member>
        <member name="M:Appline.LineFactory.Application(Appline.NotifyMessage,System.Int32,System.String[])">
            <summary>
            Generates the other side object of the line.
            </summary>
            <param name="notify">The notification object.</param>
            <param name="timeout">Time waiting for the connection response.</param>
            <param name="args">Pass entry point args for connect.</param>
            <returns>Returns the other side of the line.</returns>
        </member>
        <member name="M:Appline.LineFactory.Application``1(Appline.NotifyContext{``0},System.Int32,System.String[])">
            <summary>
            Generates the other side object of the line.
            </summary>
            <typeparam name="TContext">Type of the transmitted context.</typeparam>
            <param name="notify">The notification object.</param>
            <param name="timeout">Time waiting for the connection response.</param>
            <param name="args">Pass entry point args for connect.</param>
            <returns>Returns the other side of the line.</returns>
        </member>
        <member name="T:Appline.MessageLine">
            <summary>
            Line for the transfer of messages.
            </summary>
        </member>
        <member name="P:Appline.MessageLine.Notify">
            <summary>
            The notification object.
            </summary>
        </member>
        <member name="P:Appline.MessageLine.IsConnected">
            <summary>
            Indicates the status of the line.
            </summary>
        </member>
        <member name="P:Appline.MessageLine.IsRunning">
            <summary>
            Indicates whether the process is running.
            </summary>
        </member>
        <member name="P:Appline.MessageLine.IsLauncher">
            <summary>
            Indicates whether this line is the main line.
            </summary>
        </member>
        <member name="M:Appline.MessageLine.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Appline.MessageLine.Send(System.String)">
            <summary>
            Sends the string to the other end of the line.
            </summary>
            <param name="msg">String message.</param>
        </member>
        <member name="M:Appline.MessageLine.Receive">
            <summary>
            Contains the cycle for receiving a message
            </summary>
        </member>
        <member name="M:Appline.MessageLine.Close">
            <summary>
            Closes the line.
            </summary>
        </member>
        <member name="M:Appline.MessageLine.Base64Encode(System.String)">
            <summary>
            Encodes a string for transmission.
            </summary>
        </member>
        <member name="M:Appline.MessageLine.Base64Decode(System.String)">
            <summary>
            Decodes a string from transmission.
            </summary>
        </member>
        <member name="M:Appline.MessageLine.Dispose">
            <summary>
            Release All resources used by the line.
            </summary>
        </member>
        <member name="T:Appline.NotifyContext`1">
            <summary>
            This object registers events for listening.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:Appline.NotifyContext`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Appline.NotifyContext`1.ContextChanges">
            <summary>
            It will be called when the context object is received.
            </summary>
        </member>
        <member name="T:Appline.NotifyMessage">
            <summary>
            This object registers events for listening.
            </summary>
        </member>
        <member name="M:Appline.NotifyMessage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Appline.NotifyMessage.Timeout">
            <summary>
            It will be called if the start fails for the allotted time.
            </summary>
        </member>
        <member name="E:Appline.NotifyMessage.Connected">
            <summary>
            It will be called when the connection is successful.
            </summary>
        </member>
        <member name="E:Appline.NotifyMessage.Disconnected">
            <summary>
            It will be called when the connection fails.
            </summary>
        </member>
        <member name="E:Appline.NotifyMessage.Message">
            <summary>
            It will be called when a string is received.
            </summary>
        </member>
        <member name="E:Appline.NotifyMessage.Exception">
            <summary>
            It will be called when the line throw any exception
            </summary>
        </member>
    </members>
</doc>
